import * as React from 'react';
import { HeaderNavigation, OrdinoFooter } from 'ordino';
import { FeatureCard } from './components/FeatureCard';
export function FeaturesPage() {
    return (React.createElement(React.Fragment, null,
        React.createElement(HeaderNavigation, null),
        React.createElement("div", { className: "position-relative pt-6" },
            React.createElement("div", { className: "ordino-container" },
                React.createElement("div", { className: "p-6 container" },
                    React.createElement("div", { className: "row" },
                        React.createElement("div", { className: "col" },
                            React.createElement("h4", { className: "text-start d-flex align-items-center mb-3" },
                                React.createElement("i", { className: "me-2 ordino-icon-1 fas fa-chevron-circle-right" }),
                                " Define list of items"))),
                    React.createElement("div", { className: "row" },
                        React.createElement("div", { className: "col" },
                            React.createElement("p", { className: "lead text-gray-600" }, "The user starts the analysis by defining a set of items. The item set can be determined by manually entering a list of identifiers (e.g., a list of gene symbols), by selecting a previously saved or predefined list of items, or by uploading a comma-separated file."))),
                    React.createElement("div", { className: "row mt-6" },
                        React.createElement("div", { className: "col" },
                            React.createElement("h4", { className: "text-start d-flex align-items-center mb-3" },
                                React.createElement("i", { className: "me-2 ordino-icon-1 fas fa-chevron-circle-right" }),
                                " Rank, filter, and select items"))),
                    React.createElement("div", { className: "row" },
                        React.createElement("div", { className: "col" },
                            React.createElement("p", { className: "lead text-gray-600" },
                                "A core component of the Ordino system is the interactive visualization technique ",
                                React.createElement("a", { href: "http://lineup.js.org", target: "_blank", rel: "noopener noreferrer" }, "LineUp"),
                                ", which allows users to flexibly create and explore rankings of items based on a set of heterogeneous attributes. The exploration is supplemented with filtering features, such as setting cutoff values for numerical attributes, specifying a string or regular expression for textual columns, and specifying one or more categories in categorical attributes. In addition, users can change the visual representation of columns on demand. Numerical attributes, for instance, can be visualized using bars, varying brightness, or as circles whose sizes are proportional to the data values."),
                            React.createElement("p", { className: "lead text-gray-600" }, "As a starting point, Ordino presents the list of items as a table containing metadata attributes specific to the item type. For genes, the default columns are gene symbol, Ensembl ID, chromosome, and biotype. For cell lines and tissue samples, the default columns are name, tumor type, organ, and gender. Initially, gene lists are sorted alphabetically by gene symbol, and lists of cell lines and tissue samples by their name. Further columns can be added by clicking on the plus icon shown on the right-hand side of the interface."),
                            React.createElement("p", { className: "lead text-gray-600" }, "Ordino supports the following column types:"))),
                    React.createElement("div", { className: "row row-cols-md-2" },
                        React.createElement(FeatureCard, { title: "Annotation columns" },
                            React.createElement("p", null, "Annotation columns contain metadata about genes (such as biotype, chromosome, Ensembl ID, name, sequence region start & end, strand, and gene symbol), cell lines (age at surgery, gender, growth type, histology type, metastatic site, morphology, name, organ, and tumor type), and tissue samples (age, body mass index (BMI), days to death, days to last follow up, ethnicity, gender, height, name, organ, race, tumor type, tumor type adjacent, vendor name, vital status, and weight).")),
                        React.createElement(FeatureCard, { title: "Single score columns" },
                            React.createElement("p", null, "Depending on the item type of the main table, users can add single score columns by specifying a single item (gene, cell line, or tissue sample) together with the data attribute of interest (e.g., expression, copy number, or mutation). The following single scores are available:"),
                            React.createElement("ul", null,
                                React.createElement("li", null,
                                    "For ",
                                    React.createElement("b", null, "genes"),
                                    ": single tissue-sample score, single cell-line score, and single depletion-screen score."),
                                React.createElement("li", null,
                                    "For ",
                                    React.createElement("b", null, "cell lines"),
                                    ": single gene score and single depletion-screen score."),
                                React.createElement("li", null,
                                    "For ",
                                    React.createElement("b", null, "tissue samples"),
                                    ": single gene score."))),
                        React.createElement(FeatureCard, { title: "Aggregated score columns" },
                            React.createElement("p", null, "In addition to single score columns, the values of which are loaded directly from the the Ordino database, users can define aggregations of multiple items that are calculated on the fly by the Ordino server. To define an aggregation, users must specify (1) the set of items on whose basis the aggregation will be calculated (either by selecting previously stored named sets, by entering lists of items, or by selecting categorical attributes, such as the tumor type of cell lines), (2) the data type (expression, copy number, mutation, and depletion screen), and (3) the aggregation function (average, median, min, max, box plot, frequency, and count). The following aggregated scores are available:"),
                            React.createElement("ul", null,
                                React.createElement("li", null,
                                    "For ",
                                    React.createElement("b", null, "genes"),
                                    ": aggregated tissue-sample score, aggregated cell-line score, and aggregated depletion-screen score."),
                                React.createElement("li", null,
                                    "For ",
                                    React.createElement("b", null, "cell lines"),
                                    ": aggregated gene score and aggregated depletion-screen score."),
                                React.createElement("li", null,
                                    "For ",
                                    React.createElement("b", null, "tissues samples"),
                                    ": aggregated gene score."))),
                        React.createElement(FeatureCard, { title: "Combining columns" },
                            React.createElement("p", null,
                                "Combining columns allow users to combine the content of multiple columns by dragging the header of single columns onto the combined column header.",
                                React.createElement("br", null),
                                "The available combining columns are:"),
                            React.createElement("ul", null,
                                React.createElement("li", null,
                                    React.createElement("b", null, "Weighted sum columns"),
                                    " , which are visualized as stacked bars highlighting the contribution of individual attributes to the total score."),
                                React.createElement("li", null,
                                    React.createElement("b", null, "min/mean/max combination columns"),
                                    ", which show only the minimum, mean or maximum of all combined columns."),
                                React.createElement("li", null,
                                    React.createElement("b", null, "Scripted columns"),
                                    ", for which users can define how individual columns are to be combined using JavaScript."),
                                React.createElement("li", null,
                                    React.createElement("b", null, "Nested columns"),
                                    " for semantically grouping multiple columns."),
                                React.createElement("li", null,
                                    React.createElement("b", null, "Imposition columns"),
                                    ", which color numerical columns by a categorical attribute."))),
                        React.createElement(FeatureCard, { title: "Uploaded columns" },
                            React.createElement("p", null, "Uploaded columns allow users to fuse external data to the currently shown table. The data can be loaded from a comma-separated file in which the first column contains the unique identifier of the primary identifier in the table, followed by one or multiple columns holding the data to be integrated. The system automatically detects common annotations, such as gene symbols and Ensembl IDs."))),
                    React.createElement("div", { className: "row mt-6" },
                        React.createElement("div", { className: "col" },
                            React.createElement("h4", { className: "text-start d-flex align-items-center mb-3" },
                                React.createElement("i", { className: "me-2 ordino-icon-1 fas fa-chevron-circle-right" }),
                                " Perform basic statistical analyses"))),
                    React.createElement("div", { className: "row" },
                        React.createElement("div", { className: "col" },
                            React.createElement("p", { className: "lead text-gray-600" }, "Seeking relationships and patterns in tabular data is a common data exploration task. To confirm hypotheses that are based on visual patterns observed during exploratory data analysis, users need to be able to quickly compare data subsets, and get further information on the significance of the result and the statistical test applied."),
                            React.createElement("p", { className: "lead text-gray-600" },
                                "The ",
                                React.createElement("b", null, "statistical analysis"),
                                " panel in each ranking enables users who are not experts in statistics to verify generated hypotheses and confirm insights gained during the exploration of tabular data. Concretely, it presents an overview of the statistical significance of various row or column comparisons. On demand, it shows further details, including the ",
                                React.createElement("b", null, "test score"),
                                ", a ",
                                React.createElement("b", null, "textual description"),
                                ", and a ",
                                React.createElement("b", null, "detail visualization"),
                                " explaining the results."))),
                    React.createElement("div", { className: "row mt-6" },
                        React.createElement("div", { className: "col" },
                            React.createElement("h4", { className: "text-start d-flex align-items-center mb-3" },
                                React.createElement("i", { className: "me-2 ordino-icon-1 fas fa-chevron-circle-right" }),
                                " Obtain detailed information"))),
                    React.createElement("div", { className: "row" },
                        React.createElement("div", { className: "col" },
                            React.createElement("p", { className: "lead text-gray-600" }, "Users can select one or more items in a ranking table for exploration using a collection of detail views. The detail views offered to the user depend on the type of items selected. Ordino includes the following detail views:"))),
                    React.createElement("div", { className: "row row-cols-md-2" },
                        React.createElement(FeatureCard, { title: "Database info view" },
                            React.createElement("p", null, "Database Info view for showing metadata stored in the database for all selected items. The information is represented as a table containing a row for each database attribute and a column for each selected item.")),
                        React.createElement(FeatureCard, { title: "Expression view, copy number view and mutation view" },
                            React.createElement("p", null,
                                "Expression view, Copy Number view, and Mutation view visualizing experimental data for the currently selected items with the ranking visualization technique ",
                                React.createElement("a", { href: "http://lineup.js.org", target: "_blank", rel: "noopener noreferrer" }, "LineUp"),
                                ".")),
                        React.createElement(FeatureCard, { title: "Combined view" },
                            React.createElement("p", null, "Combined view is a specialized ranking view that is able to show copy number, expression, and mutation data in combination.")),
                        React.createElement(FeatureCard, { title: "Expression vs. copy number view" },
                            React.createElement("p", null, "Expression vs. Copy Number view showing a scatterplot for each selected gene with copy number mapped to the x-axis and expression to the y-axis. The analyst can determine via a drop-down list whether the scatterplot shows cell lines or tissue samples. Dots in the plots can be colored by preloaded categorical attributes, such as tumor type, gender and organ.")),
                        React.createElement(FeatureCard, { title: "Co-expression view" },
                            React.createElement("p", null, "Co-Expression view for comparing the expression of multiple selected genes. If multiple genes are selected, one plot is shown for each combination. Analogously to the Expression vs. Copy Number view, the dots represent either cell lines or tissue samples and can be colored by categorical attributes.")),
                        React.createElement(FeatureCard, { title: "OncoPrint view" },
                            React.createElement("p", null, "OncoPrint view showing a horizontal series of colored blocks (glyphs) for each gene selected. Depending on the chosen data subset, each block represents a cell line or tissue sample. The background color of the blocks indicates the copy number status (pink=amplification, blue=deep deletion, gray=normal, white=unknown), while the small block contained visualizes the mutation status (green=mutated, gray=non mutated, white=unknown) of a cell line or tissue sample.")),
                        React.createElement(FeatureCard, { title: "External resource views" },
                            React.createElement("p", null,
                                "External resource views loading the content of external websites. For selected genes, the user can look at the information available on ",
                                React.createElement("a", { href: "https://ensembl.org/", target: "_blank", rel: "noopener noreferrer" }, "Ensembl"),
                                ", ",
                                React.createElement("a", { href: "https://proteinatlas.org/", target: "_blank", rel: "noopener noreferrer" }, "Human Protein Atlas"),
                                ", ",
                                React.createElement("a", { href: "https://www.targetvalidation.org/", target: "_blank", rel: "noopener noreferrer" }, "Open Targets"),
                                ", ",
                                React.createElement("a", { href: "https://www.ncbi.nlm.nih.gov/pubmed", target: "_blank", rel: "noopener noreferrer" }, "PubMed"),
                                ", and ",
                                React.createElement("a", { href: "https://www.ncbi.nlm.nih.gov/pubmed", target: "_blank", rel: "noopener noreferrer" }, "UniProt"),
                                ". For cell lines, the analyst can load the information available on ",
                                React.createElement("a", { href: "https://cancer.sanger.ac.uk/cosmic/", target: "_blank", rel: "noopener noreferrer" }, "COSMIC"),
                                " (Catalogue Of Somatic Mutations In Cancer).")))),
                React.createElement(OrdinoFooter, null)))));
}
//# sourceMappingURL=FeaturesPage.js.map